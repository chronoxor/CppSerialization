// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: trade.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 11000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ceaf67d5278e9b08);
enum class OrderSide_ceaf67d5278e9b08: uint16_t {
  BUY,
  SELL,
};
CAPNP_DECLARE_ENUM(OrderSide, ceaf67d5278e9b08);
CAPNP_DECLARE_SCHEMA(8a1823b59b807011);
enum class OrderType_8a1823b59b807011: uint16_t {
  MARKET,
  LIMIT,
  STOP,
};
CAPNP_DECLARE_ENUM(OrderType, 8a1823b59b807011);
CAPNP_DECLARE_SCHEMA(ec26d82684ac6ce6);
CAPNP_DECLARE_SCHEMA(956aab4db434f8af);
CAPNP_DECLARE_SCHEMA(dea92a2f26e352c7);

}  // namespace schemas
}  // namespace capnp

namespace Trade {
namespace capnproto {

typedef ::capnp::schemas::OrderSide_ceaf67d5278e9b08 OrderSide;

typedef ::capnp::schemas::OrderType_8a1823b59b807011 OrderType;

struct Order {
  Order() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec26d82684ac6ce6, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Balance {
  Balance() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(956aab4db434f8af, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Account {
  Account() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dea92a2f26e352c7, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Order::Reader {
public:
  typedef Order Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline bool hasSymbol() const;
  inline  ::capnp::Text::Reader getSymbol() const;

  inline  ::Trade::capnproto::OrderSide getSide() const;

  inline  ::Trade::capnproto::OrderType getType() const;

  inline double getPrice() const;

  inline double getVolume() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Order::Builder {
public:
  typedef Order Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasSymbol();
  inline  ::capnp::Text::Builder getSymbol();
  inline void setSymbol( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSymbol(unsigned int size);
  inline void adoptSymbol(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSymbol();

  inline  ::Trade::capnproto::OrderSide getSide();
  inline void setSide( ::Trade::capnproto::OrderSide value);

  inline  ::Trade::capnproto::OrderType getType();
  inline void setType( ::Trade::capnproto::OrderType value);

  inline double getPrice();
  inline void setPrice(double value);

  inline double getVolume();
  inline void setVolume(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Order::Pipeline {
public:
  typedef Order Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Balance::Reader {
public:
  typedef Balance Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCurrency() const;
  inline  ::capnp::Text::Reader getCurrency() const;

  inline double getAmount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Balance::Builder {
public:
  typedef Balance Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCurrency();
  inline  ::capnp::Text::Builder getCurrency();
  inline void setCurrency( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCurrency(unsigned int size);
  inline void adoptCurrency(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCurrency();

  inline double getAmount();
  inline void setAmount(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Balance::Pipeline {
public:
  typedef Balance Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Account::Reader {
public:
  typedef Account Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasWallet() const;
  inline  ::Trade::capnproto::Balance::Reader getWallet() const;

  inline bool hasOrders() const;
  inline  ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>::Reader getOrders() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Account::Builder {
public:
  typedef Account Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasWallet();
  inline  ::Trade::capnproto::Balance::Builder getWallet();
  inline void setWallet( ::Trade::capnproto::Balance::Reader value);
  inline  ::Trade::capnproto::Balance::Builder initWallet();
  inline void adoptWallet(::capnp::Orphan< ::Trade::capnproto::Balance>&& value);
  inline ::capnp::Orphan< ::Trade::capnproto::Balance> disownWallet();

  inline bool hasOrders();
  inline  ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>::Builder getOrders();
  inline void setOrders( ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>::Builder initOrders(unsigned int size);
  inline void adoptOrders(::capnp::Orphan< ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>> disownOrders();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Account::Pipeline {
public:
  typedef Account Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Trade::capnproto::Balance::Pipeline getWallet();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int32_t Order::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Order::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Order::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Order::Reader::hasSymbol() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Order::Builder::hasSymbol() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Order::Reader::getSymbol() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Order::Builder::getSymbol() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Order::Builder::setSymbol( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Order::Builder::initSymbol(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Order::Builder::adoptSymbol(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Order::Builder::disownSymbol() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::Trade::capnproto::OrderSide Order::Reader::getSide() const {
  return _reader.getDataField< ::Trade::capnproto::OrderSide>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::Trade::capnproto::OrderSide Order::Builder::getSide() {
  return _builder.getDataField< ::Trade::capnproto::OrderSide>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Order::Builder::setSide( ::Trade::capnproto::OrderSide value) {
  _builder.setDataField< ::Trade::capnproto::OrderSide>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::Trade::capnproto::OrderType Order::Reader::getType() const {
  return _reader.getDataField< ::Trade::capnproto::OrderType>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::Trade::capnproto::OrderType Order::Builder::getType() {
  return _builder.getDataField< ::Trade::capnproto::OrderType>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Order::Builder::setType( ::Trade::capnproto::OrderType value) {
  _builder.setDataField< ::Trade::capnproto::OrderType>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Order::Reader::getPrice() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Order::Builder::getPrice() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Order::Builder::setPrice(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Order::Reader::getVolume() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Order::Builder::getVolume() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Order::Builder::setVolume(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Balance::Reader::hasCurrency() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Balance::Builder::hasCurrency() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Balance::Reader::getCurrency() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Balance::Builder::getCurrency() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Balance::Builder::setCurrency( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Balance::Builder::initCurrency(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Balance::Builder::adoptCurrency(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Balance::Builder::disownCurrency() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double Balance::Reader::getAmount() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Balance::Builder::getAmount() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Balance::Builder::setAmount(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Account::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Account::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Account::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Account::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Account::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Account::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Account::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Account::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Account::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Account::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Account::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Account::Reader::hasWallet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Account::Builder::hasWallet() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::Trade::capnproto::Balance::Reader Account::Reader::getWallet() const {
  return ::capnp::_::PointerHelpers< ::Trade::capnproto::Balance>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::Trade::capnproto::Balance::Builder Account::Builder::getWallet() {
  return ::capnp::_::PointerHelpers< ::Trade::capnproto::Balance>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Trade::capnproto::Balance::Pipeline Account::Pipeline::getWallet() {
  return  ::Trade::capnproto::Balance::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Account::Builder::setWallet( ::Trade::capnproto::Balance::Reader value) {
  ::capnp::_::PointerHelpers< ::Trade::capnproto::Balance>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::Trade::capnproto::Balance::Builder Account::Builder::initWallet() {
  return ::capnp::_::PointerHelpers< ::Trade::capnproto::Balance>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Account::Builder::adoptWallet(
    ::capnp::Orphan< ::Trade::capnproto::Balance>&& value) {
  ::capnp::_::PointerHelpers< ::Trade::capnproto::Balance>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Trade::capnproto::Balance> Account::Builder::disownWallet() {
  return ::capnp::_::PointerHelpers< ::Trade::capnproto::Balance>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Account::Reader::hasOrders() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Account::Builder::hasOrders() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>::Reader Account::Reader::getOrders() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>::Builder Account::Builder::getOrders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Account::Builder::setOrders( ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>::Builder Account::Builder::initOrders(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Account::Builder::adoptOrders(
    ::capnp::Orphan< ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>> Account::Builder::disownOrders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Trade::capnproto::Order,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

