// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trade_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trade_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trade_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trade_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_2eproto;
namespace Trade {
namespace protobuf {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Balance;
struct BalanceDefaultTypeInternal;
extern BalanceDefaultTypeInternal _Balance_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
}  // namespace protobuf
}  // namespace Trade
PROTOBUF_NAMESPACE_OPEN
template<> ::Trade::protobuf::Account* Arena::CreateMaybeMessage<::Trade::protobuf::Account>(Arena*);
template<> ::Trade::protobuf::Balance* Arena::CreateMaybeMessage<::Trade::protobuf::Balance>(Arena*);
template<> ::Trade::protobuf::Order* Arena::CreateMaybeMessage<::Trade::protobuf::Order>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Trade {
namespace protobuf {

enum OrderSide : int {
  buy = 0,
  sell = 1,
  OrderSide_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderSide_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderSide_IsValid(int value);
constexpr OrderSide OrderSide_MIN = buy;
constexpr OrderSide OrderSide_MAX = sell;
constexpr int OrderSide_ARRAYSIZE = OrderSide_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderSide_descriptor();
template<typename T>
inline const std::string& OrderSide_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderSide>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderSide_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderSide_descriptor(), enum_t_value);
}
inline bool OrderSide_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderSide* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderSide>(
    OrderSide_descriptor(), name, value);
}
enum OrderType : int {
  market = 0,
  limit = 1,
  stop = 2,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderType_IsValid(int value);
constexpr OrderType OrderType_MIN = market;
constexpr OrderType OrderType_MAX = stop;
constexpr int OrderType_ARRAYSIZE = OrderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor();
template<typename T>
inline const std::string& OrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderType_descriptor(), enum_t_value);
}
inline bool OrderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderType>(
    OrderType_descriptor(), name, value);
}
// ===================================================================

class Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trade.protobuf.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() override;
  explicit constexpr Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trade.protobuf.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kIdFieldNumber = 1,
    kSideFieldNumber = 3,
    kPriceFieldNumber = 5,
    kVolumeFieldNumber = 6,
    kTypeFieldNumber = 4,
  };
  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Trade.protobuf.OrderSide side = 3;
  void clear_side();
  ::Trade::protobuf::OrderSide side() const;
  void set_side(::Trade::protobuf::OrderSide value);
  private:
  ::Trade::protobuf::OrderSide _internal_side() const;
  void _internal_set_side(::Trade::protobuf::OrderSide value);
  public:

  // double price = 5;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // double volume = 6;
  void clear_volume();
  double volume() const;
  void set_volume(double value);
  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);
  public:

  // .Trade.protobuf.OrderType type = 4;
  void clear_type();
  ::Trade::protobuf::OrderType type() const;
  void set_type(::Trade::protobuf::OrderType value);
  private:
  ::Trade::protobuf::OrderType _internal_type() const;
  void _internal_set_type(::Trade::protobuf::OrderType value);
  public:

  // @@protoc_insertion_point(class_scope:Trade.protobuf.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int side_;
  double price_;
  double volume_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class Balance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trade.protobuf.Balance) */ {
 public:
  inline Balance() : Balance(nullptr) {}
  ~Balance() override;
  explicit constexpr Balance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balance(const Balance& from);
  Balance(Balance&& from) noexcept
    : Balance() {
    *this = ::std::move(from);
  }

  inline Balance& operator=(const Balance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance& operator=(Balance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balance* internal_default_instance() {
    return reinterpret_cast<const Balance*>(
               &_Balance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Balance& a, Balance& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Balance* New() const final {
    return CreateMaybeMessage<Balance>(nullptr);
  }

  Balance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Balance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Balance& from);
  void MergeFrom(const Balance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trade.protobuf.Balance";
  }
  protected:
  explicit Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // double amount = 2;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // @@protoc_insertion_point(class_scope:Trade.protobuf.Balance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  double amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trade.protobuf.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  explicit constexpr Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trade.protobuf.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 4,
    kNameFieldNumber = 2,
    kWalletFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .Trade.protobuf.Order orders = 4;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::Trade::protobuf::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trade::protobuf::Order >*
      mutable_orders();
  private:
  const ::Trade::protobuf::Order& _internal_orders(int index) const;
  ::Trade::protobuf::Order* _internal_add_orders();
  public:
  const ::Trade::protobuf::Order& orders(int index) const;
  ::Trade::protobuf::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trade::protobuf::Order >&
      orders() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Trade.protobuf.Balance wallet = 3;
  bool has_wallet() const;
  private:
  bool _internal_has_wallet() const;
  public:
  void clear_wallet();
  const ::Trade::protobuf::Balance& wallet() const;
  ::Trade::protobuf::Balance* release_wallet();
  ::Trade::protobuf::Balance* mutable_wallet();
  void set_allocated_wallet(::Trade::protobuf::Balance* wallet);
  private:
  const ::Trade::protobuf::Balance& _internal_wallet() const;
  ::Trade::protobuf::Balance* _internal_mutable_wallet();
  public:
  void unsafe_arena_set_allocated_wallet(
      ::Trade::protobuf::Balance* wallet);
  ::Trade::protobuf::Balance* unsafe_arena_release_wallet();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Trade.protobuf.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trade::protobuf::Order > orders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Trade::protobuf::Balance* wallet_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Order

// int32 id = 1;
inline void Order::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::id() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.id)
  return _internal_id();
}
inline void Order::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Order::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.id)
}

// string symbol = 2;
inline void Order::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& Order::symbol() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Order::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.symbol)
}
inline std::string* Order::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Trade.protobuf.Order.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Order::_internal_symbol() const {
  return symbol_.Get();
}
inline void Order::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Order::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_symbol() {
  // @@protoc_insertion_point(field_release:Trade.protobuf.Order.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trade.protobuf.Order.symbol)
}

// .Trade.protobuf.OrderSide side = 3;
inline void Order::clear_side() {
  side_ = 0;
}
inline ::Trade::protobuf::OrderSide Order::_internal_side() const {
  return static_cast< ::Trade::protobuf::OrderSide >(side_);
}
inline ::Trade::protobuf::OrderSide Order::side() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.side)
  return _internal_side();
}
inline void Order::_internal_set_side(::Trade::protobuf::OrderSide value) {
  
  side_ = value;
}
inline void Order::set_side(::Trade::protobuf::OrderSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.side)
}

// .Trade.protobuf.OrderType type = 4;
inline void Order::clear_type() {
  type_ = 0;
}
inline ::Trade::protobuf::OrderType Order::_internal_type() const {
  return static_cast< ::Trade::protobuf::OrderType >(type_);
}
inline ::Trade::protobuf::OrderType Order::type() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.type)
  return _internal_type();
}
inline void Order::_internal_set_type(::Trade::protobuf::OrderType value) {
  
  type_ = value;
}
inline void Order::set_type(::Trade::protobuf::OrderType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.type)
}

// double price = 5;
inline void Order::clear_price() {
  price_ = 0;
}
inline double Order::_internal_price() const {
  return price_;
}
inline double Order::price() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.price)
  return _internal_price();
}
inline void Order::_internal_set_price(double value) {
  
  price_ = value;
}
inline void Order::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.price)
}

// double volume = 6;
inline void Order::clear_volume() {
  volume_ = 0;
}
inline double Order::_internal_volume() const {
  return volume_;
}
inline double Order::volume() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.volume)
  return _internal_volume();
}
inline void Order::_internal_set_volume(double value) {
  
  volume_ = value;
}
inline void Order::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.volume)
}

// -------------------------------------------------------------------

// Balance

// string currency = 1;
inline void Balance::clear_currency() {
  currency_.ClearToEmpty();
}
inline const std::string& Balance::currency() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Balance.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Balance::set_currency(ArgT0&& arg0, ArgT... args) {
 
 currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:Trade.protobuf.Balance.currency)
}
inline std::string* Balance::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:Trade.protobuf.Balance.currency)
  return _internal_mutable_currency();
}
inline const std::string& Balance::_internal_currency() const {
  return currency_.Get();
}
inline void Balance::_internal_set_currency(const std::string& value) {
  
  currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Balance::_internal_mutable_currency() {
  
  return currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Balance::release_currency() {
  // @@protoc_insertion_point(field_release:Trade.protobuf.Balance.currency)
  return currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Balance::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trade.protobuf.Balance.currency)
}

// double amount = 2;
inline void Balance::clear_amount() {
  amount_ = 0;
}
inline double Balance::_internal_amount() const {
  return amount_;
}
inline double Balance::amount() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Balance.amount)
  return _internal_amount();
}
inline void Balance::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void Balance::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Balance.amount)
}

// -------------------------------------------------------------------

// Account

// int32 id = 1;
inline void Account::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Account::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Account::id() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Account.id)
  return _internal_id();
}
inline void Account::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Account::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Account.id)
}

// string name = 2;
inline void Account::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Account.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Account::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:Trade.protobuf.Account.name)
}
inline std::string* Account::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Trade.protobuf.Account.name)
  return _internal_mutable_name();
}
inline const std::string& Account::_internal_name() const {
  return name_.Get();
}
inline void Account::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Account::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:Trade.protobuf.Account.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trade.protobuf.Account.name)
}

// .Trade.protobuf.Balance wallet = 3;
inline bool Account::_internal_has_wallet() const {
  return this != internal_default_instance() && wallet_ != nullptr;
}
inline bool Account::has_wallet() const {
  return _internal_has_wallet();
}
inline void Account::clear_wallet() {
  if (GetArena() == nullptr && wallet_ != nullptr) {
    delete wallet_;
  }
  wallet_ = nullptr;
}
inline const ::Trade::protobuf::Balance& Account::_internal_wallet() const {
  const ::Trade::protobuf::Balance* p = wallet_;
  return p != nullptr ? *p : reinterpret_cast<const ::Trade::protobuf::Balance&>(
      ::Trade::protobuf::_Balance_default_instance_);
}
inline const ::Trade::protobuf::Balance& Account::wallet() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Account.wallet)
  return _internal_wallet();
}
inline void Account::unsafe_arena_set_allocated_wallet(
    ::Trade::protobuf::Balance* wallet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wallet_);
  }
  wallet_ = wallet;
  if (wallet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trade.protobuf.Account.wallet)
}
inline ::Trade::protobuf::Balance* Account::release_wallet() {
  
  ::Trade::protobuf::Balance* temp = wallet_;
  wallet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Trade::protobuf::Balance* Account::unsafe_arena_release_wallet() {
  // @@protoc_insertion_point(field_release:Trade.protobuf.Account.wallet)
  
  ::Trade::protobuf::Balance* temp = wallet_;
  wallet_ = nullptr;
  return temp;
}
inline ::Trade::protobuf::Balance* Account::_internal_mutable_wallet() {
  
  if (wallet_ == nullptr) {
    auto* p = CreateMaybeMessage<::Trade::protobuf::Balance>(GetArena());
    wallet_ = p;
  }
  return wallet_;
}
inline ::Trade::protobuf::Balance* Account::mutable_wallet() {
  // @@protoc_insertion_point(field_mutable:Trade.protobuf.Account.wallet)
  return _internal_mutable_wallet();
}
inline void Account::set_allocated_wallet(::Trade::protobuf::Balance* wallet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wallet_;
  }
  if (wallet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wallet);
    if (message_arena != submessage_arena) {
      wallet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wallet, submessage_arena);
    }
    
  } else {
    
  }
  wallet_ = wallet;
  // @@protoc_insertion_point(field_set_allocated:Trade.protobuf.Account.wallet)
}

// repeated .Trade.protobuf.Order orders = 4;
inline int Account::_internal_orders_size() const {
  return orders_.size();
}
inline int Account::orders_size() const {
  return _internal_orders_size();
}
inline void Account::clear_orders() {
  orders_.Clear();
}
inline ::Trade::protobuf::Order* Account::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:Trade.protobuf.Account.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trade::protobuf::Order >*
Account::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:Trade.protobuf.Account.orders)
  return &orders_;
}
inline const ::Trade::protobuf::Order& Account::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::Trade::protobuf::Order& Account::orders(int index) const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Account.orders)
  return _internal_orders(index);
}
inline ::Trade::protobuf::Order* Account::_internal_add_orders() {
  return orders_.Add();
}
inline ::Trade::protobuf::Order* Account::add_orders() {
  // @@protoc_insertion_point(field_add:Trade.protobuf.Account.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trade::protobuf::Order >&
Account::orders() const {
  // @@protoc_insertion_point(field_list:Trade.protobuf.Account.orders)
  return orders_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace Trade

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Trade::protobuf::OrderSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trade::protobuf::OrderSide>() {
  return ::Trade::protobuf::OrderSide_descriptor();
}
template <> struct is_proto_enum< ::Trade::protobuf::OrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trade::protobuf::OrderType>() {
  return ::Trade::protobuf::OrderType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trade_2eproto
