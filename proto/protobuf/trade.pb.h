// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: trade.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_trade_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_trade_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_trade_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_trade_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_trade_2eproto;
namespace Trade {
namespace protobuf {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Balance;
struct BalanceDefaultTypeInternal;
extern BalanceDefaultTypeInternal _Balance_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
}  // namespace protobuf
}  // namespace Trade
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Trade {
namespace protobuf {
enum OrderSide : int {
  buy = 0,
  sell = 1,
  OrderSide_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OrderSide_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OrderSide_IsValid(int value);
extern const uint32_t OrderSide_internal_data_[];
constexpr OrderSide OrderSide_MIN = static_cast<OrderSide>(0);
constexpr OrderSide OrderSide_MAX = static_cast<OrderSide>(1);
constexpr int OrderSide_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
OrderSide_descriptor();
template <typename T>
const std::string& OrderSide_Name(T value) {
  static_assert(std::is_same<T, OrderSide>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OrderSide_Name().");
  return OrderSide_Name(static_cast<OrderSide>(value));
}
template <>
inline const std::string& OrderSide_Name(OrderSide value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OrderSide_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool OrderSide_Parse(absl::string_view name, OrderSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderSide>(
      OrderSide_descriptor(), name, value);
}
enum OrderType : int {
  market = 0,
  limit = 1,
  stop = 2,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OrderType_IsValid(int value);
extern const uint32_t OrderType_internal_data_[];
constexpr OrderType OrderType_MIN = static_cast<OrderType>(0);
constexpr OrderType OrderType_MAX = static_cast<OrderType>(2);
constexpr int OrderType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
OrderType_descriptor();
template <typename T>
const std::string& OrderType_Name(T value) {
  static_assert(std::is_same<T, OrderType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OrderType_Name().");
  return OrderType_Name(static_cast<OrderType>(value));
}
template <>
inline const std::string& OrderType_Name(OrderType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OrderType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool OrderType_Parse(absl::string_view name, OrderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderType>(
      OrderType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Order final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Trade.protobuf.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Order(
      ::google::protobuf::internal::ConstantInitialized);

  inline Order(const Order& from) : Order(nullptr, from) {}
  inline Order(Order&& from) noexcept
      : Order(nullptr, std::move(from)) {}
  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
        &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Order& a, Order& b) { a.Swap(&b); }
  inline void Swap(Order* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Order* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Order>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Order& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Order& from) { Order::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Order* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Trade.protobuf.Order"; }

 protected:
  explicit Order(::google::protobuf::Arena* arena);
  Order(::google::protobuf::Arena* arena, const Order& from);
  Order(::google::protobuf::Arena* arena, Order&& from) noexcept
      : Order(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 2,
    kIdFieldNumber = 1,
    kSideFieldNumber = 3,
    kPriceFieldNumber = 5,
    kVolumeFieldNumber = 6,
    kTypeFieldNumber = 4,
  };
  // string symbol = 2;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .Trade.protobuf.OrderSide side = 3;
  void clear_side() ;
  ::Trade::protobuf::OrderSide side() const;
  void set_side(::Trade::protobuf::OrderSide value);

  private:
  ::Trade::protobuf::OrderSide _internal_side() const;
  void _internal_set_side(::Trade::protobuf::OrderSide value);

  public:
  // double price = 5;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double volume = 6;
  void clear_volume() ;
  double volume() const;
  void set_volume(double value);

  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);

  public:
  // .Trade.protobuf.OrderType type = 4;
  void clear_type() ;
  ::Trade::protobuf::OrderType type() const;
  void set_type(::Trade::protobuf::OrderType value);

  private:
  ::Trade::protobuf::OrderType _internal_type() const;
  void _internal_set_type(::Trade::protobuf::OrderType value);

  public:
  // @@protoc_insertion_point(class_scope:Trade.protobuf.Order)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      35, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Order_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::int32_t id_;
    int side_;
    double price_;
    double volume_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class Balance final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Trade.protobuf.Balance) */ {
 public:
  inline Balance() : Balance(nullptr) {}
  ~Balance() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Balance(
      ::google::protobuf::internal::ConstantInitialized);

  inline Balance(const Balance& from) : Balance(nullptr, from) {}
  inline Balance(Balance&& from) noexcept
      : Balance(nullptr, std::move(from)) {}
  inline Balance& operator=(const Balance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance& operator=(Balance&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balance* internal_default_instance() {
    return reinterpret_cast<const Balance*>(
        &_Balance_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Balance& a, Balance& b) { a.Swap(&b); }
  inline void Swap(Balance* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Balance* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Balance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Balance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Balance& from) { Balance::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Balance* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Trade.protobuf.Balance"; }

 protected:
  explicit Balance(::google::protobuf::Arena* arena);
  Balance(::google::protobuf::Arena* arena, const Balance& from);
  Balance(::google::protobuf::Arena* arena, Balance&& from) noexcept
      : Balance(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCurrencyFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string currency = 1;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // double amount = 2;
  void clear_amount() ;
  double amount() const;
  void set_amount(double value);

  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);

  public:
  // @@protoc_insertion_point(class_scope:Trade.protobuf.Balance)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Balance_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr currency_;
    double amount_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class Account final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Trade.protobuf.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Account(
      ::google::protobuf::internal::ConstantInitialized);

  inline Account(const Account& from) : Account(nullptr, from) {}
  inline Account(Account&& from) noexcept
      : Account(nullptr, std::move(from)) {}
  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
        &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Account& a, Account& b) { a.Swap(&b); }
  inline void Swap(Account* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Account>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Account& from) { Account::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Account* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Trade.protobuf.Account"; }

 protected:
  explicit Account(::google::protobuf::Arena* arena);
  Account(::google::protobuf::Arena* arena, const Account& from);
  Account(::google::protobuf::Arena* arena, Account&& from) noexcept
      : Account(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOrdersFieldNumber = 4,
    kNameFieldNumber = 2,
    kWalletFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .Trade.protobuf.Order orders = 4;
  int orders_size() const;
  private:
  int _internal_orders_size() const;

  public:
  void clear_orders() ;
  ::Trade::protobuf::Order* mutable_orders(int index);
  ::google::protobuf::RepeatedPtrField<::Trade::protobuf::Order>* mutable_orders();

  private:
  const ::google::protobuf::RepeatedPtrField<::Trade::protobuf::Order>& _internal_orders() const;
  ::google::protobuf::RepeatedPtrField<::Trade::protobuf::Order>* _internal_mutable_orders();
  public:
  const ::Trade::protobuf::Order& orders(int index) const;
  ::Trade::protobuf::Order* add_orders();
  const ::google::protobuf::RepeatedPtrField<::Trade::protobuf::Order>& orders() const;
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .Trade.protobuf.Balance wallet = 3;
  bool has_wallet() const;
  void clear_wallet() ;
  const ::Trade::protobuf::Balance& wallet() const;
  PROTOBUF_NODISCARD ::Trade::protobuf::Balance* release_wallet();
  ::Trade::protobuf::Balance* mutable_wallet();
  void set_allocated_wallet(::Trade::protobuf::Balance* value);
  void unsafe_arena_set_allocated_wallet(::Trade::protobuf::Balance* value);
  ::Trade::protobuf::Balance* unsafe_arena_release_wallet();

  private:
  const ::Trade::protobuf::Balance& _internal_wallet() const;
  ::Trade::protobuf::Balance* _internal_mutable_wallet();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Trade.protobuf.Account)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      35, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Account_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::Trade::protobuf::Order > orders_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::Trade::protobuf::Balance* wallet_;
    ::int32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trade_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Order

// int32 id = 1;
inline void Order::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t Order::id() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.id)
  return _internal_id();
}
inline void Order::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.id)
}
inline ::int32_t Order::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Order::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string symbol = 2;
inline void Order::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Order::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.symbol)
}
inline std::string* Order::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:Trade.protobuf.Order.symbol)
  return _s;
}
inline const std::string& Order::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void Order::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* Order::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Trade.protobuf.Order.symbol)
  return _impl_.symbol_.Release();
}
inline void Order::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Trade.protobuf.Order.symbol)
}

// .Trade.protobuf.OrderSide side = 3;
inline void Order::clear_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_ = 0;
}
inline ::Trade::protobuf::OrderSide Order::side() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.side)
  return _internal_side();
}
inline void Order::set_side(::Trade::protobuf::OrderSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.side)
}
inline ::Trade::protobuf::OrderSide Order::_internal_side() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Trade::protobuf::OrderSide>(_impl_.side_);
}
inline void Order::_internal_set_side(::Trade::protobuf::OrderSide value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_ = value;
}

// .Trade.protobuf.OrderType type = 4;
inline void Order::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::Trade::protobuf::OrderType Order::type() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.type)
  return _internal_type();
}
inline void Order::set_type(::Trade::protobuf::OrderType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.type)
}
inline ::Trade::protobuf::OrderType Order::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Trade::protobuf::OrderType>(_impl_.type_);
}
inline void Order::_internal_set_type(::Trade::protobuf::OrderType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// double price = 5;
inline void Order::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double Order::price() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.price)
  return _internal_price();
}
inline void Order::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.price)
}
inline double Order::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void Order::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double volume = 6;
inline void Order::clear_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = 0;
}
inline double Order::volume() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Order.volume)
  return _internal_volume();
}
inline void Order::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Order.volume)
}
inline double Order::_internal_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volume_;
}
inline void Order::_internal_set_volume(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = value;
}

// -------------------------------------------------------------------

// Balance

// string currency = 1;
inline void Balance::clear_currency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& Balance::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Balance.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Balance::set_currency(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Trade.protobuf.Balance.currency)
}
inline std::string* Balance::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:Trade.protobuf.Balance.currency)
  return _s;
}
inline const std::string& Balance::_internal_currency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.currency_.Get();
}
inline void Balance::_internal_set_currency(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* Balance::_internal_mutable_currency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* Balance::release_currency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Trade.protobuf.Balance.currency)
  return _impl_.currency_.Release();
}
inline void Balance::set_allocated_currency(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Trade.protobuf.Balance.currency)
}

// double amount = 2;
inline void Balance::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = 0;
}
inline double Balance::amount() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Balance.amount)
  return _internal_amount();
}
inline void Balance::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Balance.amount)
}
inline double Balance::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void Balance::_internal_set_amount(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// -------------------------------------------------------------------

// Account

// int32 id = 1;
inline void Account::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t Account::id() const {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Account.id)
  return _internal_id();
}
inline void Account::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Trade.protobuf.Account.id)
}
inline ::int32_t Account::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Account::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string name = 2;
inline void Account::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Account::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Account.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Account::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Trade.protobuf.Account.name)
}
inline std::string* Account::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Trade.protobuf.Account.name)
  return _s;
}
inline const std::string& Account::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Account::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Account::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Account::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Trade.protobuf.Account.name)
  return _impl_.name_.Release();
}
inline void Account::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Trade.protobuf.Account.name)
}

// .Trade.protobuf.Balance wallet = 3;
inline bool Account::has_wallet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wallet_ != nullptr);
  return value;
}
inline void Account::clear_wallet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wallet_ != nullptr) _impl_.wallet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Trade::protobuf::Balance& Account::_internal_wallet() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Trade::protobuf::Balance* p = _impl_.wallet_;
  return p != nullptr ? *p : reinterpret_cast<const ::Trade::protobuf::Balance&>(::Trade::protobuf::_Balance_default_instance_);
}
inline const ::Trade::protobuf::Balance& Account::wallet() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Account.wallet)
  return _internal_wallet();
}
inline void Account::unsafe_arena_set_allocated_wallet(::Trade::protobuf::Balance* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.wallet_);
  }
  _impl_.wallet_ = reinterpret_cast<::Trade::protobuf::Balance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trade.protobuf.Account.wallet)
}
inline ::Trade::protobuf::Balance* Account::release_wallet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Trade::protobuf::Balance* released = _impl_.wallet_;
  _impl_.wallet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Trade::protobuf::Balance* Account::unsafe_arena_release_wallet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Trade.protobuf.Account.wallet)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Trade::protobuf::Balance* temp = _impl_.wallet_;
  _impl_.wallet_ = nullptr;
  return temp;
}
inline ::Trade::protobuf::Balance* Account::_internal_mutable_wallet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.wallet_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Trade::protobuf::Balance>(GetArena());
    _impl_.wallet_ = reinterpret_cast<::Trade::protobuf::Balance*>(p);
  }
  return _impl_.wallet_;
}
inline ::Trade::protobuf::Balance* Account::mutable_wallet() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Trade::protobuf::Balance* _msg = _internal_mutable_wallet();
  // @@protoc_insertion_point(field_mutable:Trade.protobuf.Account.wallet)
  return _msg;
}
inline void Account::set_allocated_wallet(::Trade::protobuf::Balance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.wallet_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.wallet_ = reinterpret_cast<::Trade::protobuf::Balance*>(value);
  // @@protoc_insertion_point(field_set_allocated:Trade.protobuf.Account.wallet)
}

// repeated .Trade.protobuf.Order orders = 4;
inline int Account::_internal_orders_size() const {
  return _internal_orders().size();
}
inline int Account::orders_size() const {
  return _internal_orders_size();
}
inline void Account::clear_orders() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orders_.Clear();
}
inline ::Trade::protobuf::Order* Account::mutable_orders(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Trade.protobuf.Account.orders)
  return _internal_mutable_orders()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Trade::protobuf::Order>* Account::mutable_orders()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Trade.protobuf.Account.orders)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_orders();
}
inline const ::Trade::protobuf::Order& Account::orders(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Trade.protobuf.Account.orders)
  return _internal_orders().Get(index);
}
inline ::Trade::protobuf::Order* Account::add_orders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Trade::protobuf::Order* _add = _internal_mutable_orders()->Add();
  // @@protoc_insertion_point(field_add:Trade.protobuf.Account.orders)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Trade::protobuf::Order>& Account::orders() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Trade.protobuf.Account.orders)
  return _internal_orders();
}
inline const ::google::protobuf::RepeatedPtrField<::Trade::protobuf::Order>&
Account::_internal_orders() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orders_;
}
inline ::google::protobuf::RepeatedPtrField<::Trade::protobuf::Order>*
Account::_internal_mutable_orders() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.orders_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace Trade


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Trade::protobuf::OrderSide> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Trade::protobuf::OrderSide>() {
  return ::Trade::protobuf::OrderSide_descriptor();
}
template <>
struct is_proto_enum<::Trade::protobuf::OrderType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Trade::protobuf::OrderType>() {
  return ::Trade::protobuf::OrderType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_trade_2eproto_2epb_2eh
