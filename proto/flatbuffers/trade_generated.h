// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRADE_TRADE_FLATBUF_H_
#define FLATBUFFERS_GENERATED_TRADE_TRADE_FLATBUF_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace Trade {
namespace flatbuf {

struct Order;
struct OrderBuilder;

struct Balance;
struct BalanceBuilder;

struct Account;
struct AccountBuilder;

enum class OrderSide : int8_t {
  buy = 0,
  sell = 1,
  MIN = buy,
  MAX = sell
};

inline const OrderSide (&EnumValuesOrderSide())[2] {
  static const OrderSide values[] = {
    OrderSide::buy,
    OrderSide::sell
  };
  return values;
}

inline const char * const *EnumNamesOrderSide() {
  static const char * const names[3] = {
    "buy",
    "sell",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrderSide(OrderSide e) {
  if (::flatbuffers::IsOutRange(e, OrderSide::buy, OrderSide::sell)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrderSide()[index];
}

enum class OrderType : int8_t {
  market = 0,
  limit = 1,
  stop = 2,
  MIN = market,
  MAX = stop
};

inline const OrderType (&EnumValuesOrderType())[3] {
  static const OrderType values[] = {
    OrderType::market,
    OrderType::limit,
    OrderType::stop
  };
  return values;
}

inline const char * const *EnumNamesOrderType() {
  static const char * const names[4] = {
    "market",
    "limit",
    "stop",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrderType(OrderType e) {
  if (::flatbuffers::IsOutRange(e, OrderType::market, OrderType::stop)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrderType()[index];
}

struct Order FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OrderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_SYMBOL = 6,
    VT_SIDE = 8,
    VT_TYPE = 10,
    VT_PRICE = 12,
    VT_VOLUME = 14
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *symbol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMBOL);
  }
  Trade::flatbuf::OrderSide side() const {
    return static_cast<Trade::flatbuf::OrderSide>(GetField<int8_t>(VT_SIDE, 0));
  }
  Trade::flatbuf::OrderType type() const {
    return static_cast<Trade::flatbuf::OrderType>(GetField<int8_t>(VT_TYPE, 0));
  }
  double price() const {
    return GetField<double>(VT_PRICE, 0.0);
  }
  double volume() const {
    return GetField<double>(VT_VOLUME, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyField<int8_t>(verifier, VT_SIDE, 1) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<double>(verifier, VT_PRICE, 8) &&
           VerifyField<double>(verifier, VT_VOLUME, 8) &&
           verifier.EndTable();
  }
};

struct OrderBuilder {
  typedef Order Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Order::VT_ID, id, 0);
  }
  void add_symbol(::flatbuffers::Offset<::flatbuffers::String> symbol) {
    fbb_.AddOffset(Order::VT_SYMBOL, symbol);
  }
  void add_side(Trade::flatbuf::OrderSide side) {
    fbb_.AddElement<int8_t>(Order::VT_SIDE, static_cast<int8_t>(side), 0);
  }
  void add_type(Trade::flatbuf::OrderType type) {
    fbb_.AddElement<int8_t>(Order::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_price(double price) {
    fbb_.AddElement<double>(Order::VT_PRICE, price, 0.0);
  }
  void add_volume(double volume) {
    fbb_.AddElement<double>(Order::VT_VOLUME, volume, 0.0);
  }
  explicit OrderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Order> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Order>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Order> CreateOrder(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> symbol = 0,
    Trade::flatbuf::OrderSide side = Trade::flatbuf::OrderSide::buy,
    Trade::flatbuf::OrderType type = Trade::flatbuf::OrderType::market,
    double price = 0.0,
    double volume = 0.0) {
  OrderBuilder builder_(_fbb);
  builder_.add_volume(volume);
  builder_.add_price(price);
  builder_.add_symbol(symbol);
  builder_.add_id(id);
  builder_.add_type(type);
  builder_.add_side(side);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Order> CreateOrderDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *symbol = nullptr,
    Trade::flatbuf::OrderSide side = Trade::flatbuf::OrderSide::buy,
    Trade::flatbuf::OrderType type = Trade::flatbuf::OrderType::market,
    double price = 0.0,
    double volume = 0.0) {
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  return Trade::flatbuf::CreateOrder(
      _fbb,
      id,
      symbol__,
      side,
      type,
      price,
      volume);
}

struct Balance FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BalanceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CURRENCY = 4,
    VT_AMOUNT = 6
  };
  const ::flatbuffers::String *currency() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CURRENCY);
  }
  double amount() const {
    return GetField<double>(VT_AMOUNT, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CURRENCY) &&
           verifier.VerifyString(currency()) &&
           VerifyField<double>(verifier, VT_AMOUNT, 8) &&
           verifier.EndTable();
  }
};

struct BalanceBuilder {
  typedef Balance Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_currency(::flatbuffers::Offset<::flatbuffers::String> currency) {
    fbb_.AddOffset(Balance::VT_CURRENCY, currency);
  }
  void add_amount(double amount) {
    fbb_.AddElement<double>(Balance::VT_AMOUNT, amount, 0.0);
  }
  explicit BalanceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Balance> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Balance>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Balance> CreateBalance(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> currency = 0,
    double amount = 0.0) {
  BalanceBuilder builder_(_fbb);
  builder_.add_amount(amount);
  builder_.add_currency(currency);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Balance> CreateBalanceDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *currency = nullptr,
    double amount = 0.0) {
  auto currency__ = currency ? _fbb.CreateString(currency) : 0;
  return Trade::flatbuf::CreateBalance(
      _fbb,
      currency__,
      amount);
}

struct Account FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AccountBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_WALLET = 8,
    VT_ORDERS = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const Trade::flatbuf::Balance *wallet() const {
    return GetPointer<const Trade::flatbuf::Balance *>(VT_WALLET);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Trade::flatbuf::Order>> *orders() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Trade::flatbuf::Order>> *>(VT_ORDERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_WALLET) &&
           verifier.VerifyTable(wallet()) &&
           VerifyOffset(verifier, VT_ORDERS) &&
           verifier.VerifyVector(orders()) &&
           verifier.VerifyVectorOfTables(orders()) &&
           verifier.EndTable();
  }
};

struct AccountBuilder {
  typedef Account Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Account::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Account::VT_NAME, name);
  }
  void add_wallet(::flatbuffers::Offset<Trade::flatbuf::Balance> wallet) {
    fbb_.AddOffset(Account::VT_WALLET, wallet);
  }
  void add_orders(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Trade::flatbuf::Order>>> orders) {
    fbb_.AddOffset(Account::VT_ORDERS, orders);
  }
  explicit AccountBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Account> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Account>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Account> CreateAccount(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<Trade::flatbuf::Balance> wallet = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Trade::flatbuf::Order>>> orders = 0) {
  AccountBuilder builder_(_fbb);
  builder_.add_orders(orders);
  builder_.add_wallet(wallet);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Account> CreateAccountDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *name = nullptr,
    ::flatbuffers::Offset<Trade::flatbuf::Balance> wallet = 0,
    const std::vector<::flatbuffers::Offset<Trade::flatbuf::Order>> *orders = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto orders__ = orders ? _fbb.CreateVector<::flatbuffers::Offset<Trade::flatbuf::Order>>(*orders) : 0;
  return Trade::flatbuf::CreateAccount(
      _fbb,
      id,
      name__,
      wallet,
      orders__);
}

inline const Trade::flatbuf::Account *GetAccount(const void *buf) {
  return ::flatbuffers::GetRoot<Trade::flatbuf::Account>(buf);
}

inline const Trade::flatbuf::Account *GetSizePrefixedAccount(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Trade::flatbuf::Account>(buf);
}

inline bool VerifyAccountBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Trade::flatbuf::Account>(nullptr);
}

inline bool VerifySizePrefixedAccountBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Trade::flatbuf::Account>(nullptr);
}

inline void FinishAccountBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Trade::flatbuf::Account> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAccountBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Trade::flatbuf::Account> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatbuf
}  // namespace Trade

#endif  // FLATBUFFERS_GENERATED_TRADE_TRADE_FLATBUF_H_
