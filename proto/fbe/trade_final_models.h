//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: trade.fbe
// FBE version: 1.14.2.0
//------------------------------------------------------------------------------

#pragma once

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe_final_models.h"

#include "trade.h"

namespace FBE {

// Fast Binary Encoding ::trade::OrderSide final model
template <>
class FinalModel<::trade::OrderSide> : public FinalModelBase<::trade::OrderSide, uint8_t>
{
public:
    using FinalModelBase<::trade::OrderSide, uint8_t>::FinalModelBase;
};

// Fast Binary Encoding ::trade::OrderType final model
template <>
class FinalModel<::trade::OrderType> : public FinalModelBase<::trade::OrderType, uint8_t>
{
public:
    using FinalModelBase<::trade::OrderType, uint8_t>::FinalModelBase;
};

// Fast Binary Encoding ::trade::Order final model
template <>
class FinalModel<::trade::Order>
{
public:
    FinalModel(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the allocation size
    size_t fbe_allocation_size(const ::trade::Order& fbe_value) const noexcept;
    // Get the final offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Set the final offset
    size_t fbe_offset(size_t offset) const noexcept { return _offset = offset; }
    // Get the final type
    static constexpr size_t fbe_type() noexcept { return 1; }

    // Shift the current final offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current final offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    size_t verify() const noexcept;
    // Check if the struct fields are valid
    size_t verify_fields() const noexcept;

    // Get the struct value
    size_t get(::trade::Order& fbe_value) const noexcept;
    // Get the struct fields values
    size_t get_fields(::trade::Order& fbe_value) const noexcept;

    // Set the struct value
    size_t set(const ::trade::Order& fbe_value) noexcept;
    // Set the struct fields values
    size_t set_fields(const ::trade::Order& fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    mutable size_t _offset;

public:
    FinalModel<int32_t> id;
    FinalModel<std::string> symbol;
    FinalModel<::trade::OrderSide> side;
    FinalModel<::trade::OrderType> type;
    FinalModel<double> price;
    FinalModel<double> volume;
};

namespace trade {

// Fast Binary Encoding Order final model
class OrderFinalModel : public FBE::Model
{
public:
    OrderFinalModel() : _model(this->buffer(), 8) {}
    OrderFinalModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), _model(this->buffer(), 8) {}

    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FinalModel<::trade::Order>::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Serialize the struct value
    size_t serialize(const ::trade::Order& value);
    // Deserialize the struct value
    size_t deserialize(::trade::Order& value) const noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { _model.fbe_shift(prev); }

private:
    FinalModel<::trade::Order> _model;
};

} // namespace trade

// Fast Binary Encoding ::trade::Balance final model
template <>
class FinalModel<::trade::Balance>
{
public:
    FinalModel(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the allocation size
    size_t fbe_allocation_size(const ::trade::Balance& fbe_value) const noexcept;
    // Get the final offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Set the final offset
    size_t fbe_offset(size_t offset) const noexcept { return _offset = offset; }
    // Get the final type
    static constexpr size_t fbe_type() noexcept { return 2; }

    // Shift the current final offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current final offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    size_t verify() const noexcept;
    // Check if the struct fields are valid
    size_t verify_fields() const noexcept;

    // Get the struct value
    size_t get(::trade::Balance& fbe_value) const noexcept;
    // Get the struct fields values
    size_t get_fields(::trade::Balance& fbe_value) const noexcept;

    // Set the struct value
    size_t set(const ::trade::Balance& fbe_value) noexcept;
    // Set the struct fields values
    size_t set_fields(const ::trade::Balance& fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    mutable size_t _offset;

public:
    FinalModel<std::string> currency;
    FinalModel<double> amount;
};

namespace trade {

// Fast Binary Encoding Balance final model
class BalanceFinalModel : public FBE::Model
{
public:
    BalanceFinalModel() : _model(this->buffer(), 8) {}
    BalanceFinalModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), _model(this->buffer(), 8) {}

    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FinalModel<::trade::Balance>::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Serialize the struct value
    size_t serialize(const ::trade::Balance& value);
    // Deserialize the struct value
    size_t deserialize(::trade::Balance& value) const noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { _model.fbe_shift(prev); }

private:
    FinalModel<::trade::Balance> _model;
};

} // namespace trade

// Fast Binary Encoding ::trade::Account final model
template <>
class FinalModel<::trade::Account>
{
public:
    FinalModel(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the allocation size
    size_t fbe_allocation_size(const ::trade::Account& fbe_value) const noexcept;
    // Get the final offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Set the final offset
    size_t fbe_offset(size_t offset) const noexcept { return _offset = offset; }
    // Get the final type
    static constexpr size_t fbe_type() noexcept { return 3; }

    // Shift the current final offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current final offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    size_t verify() const noexcept;
    // Check if the struct fields are valid
    size_t verify_fields() const noexcept;

    // Get the struct value
    size_t get(::trade::Account& fbe_value) const noexcept;
    // Get the struct fields values
    size_t get_fields(::trade::Account& fbe_value) const noexcept;

    // Set the struct value
    size_t set(const ::trade::Account& fbe_value) noexcept;
    // Set the struct fields values
    size_t set_fields(const ::trade::Account& fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    mutable size_t _offset;

public:
    FinalModel<int32_t> id;
    FinalModel<std::string> name;
    FinalModel<::trade::Balance> wallet;
    FinalModelVector<::trade::Order> orders;
};

namespace trade {

// Fast Binary Encoding Account final model
class AccountFinalModel : public FBE::Model
{
public:
    AccountFinalModel() : _model(this->buffer(), 8) {}
    AccountFinalModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), _model(this->buffer(), 8) {}

    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FinalModel<::trade::Account>::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Serialize the struct value
    size_t serialize(const ::trade::Account& value);
    // Deserialize the struct value
    size_t deserialize(::trade::Account& value) const noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { _model.fbe_shift(prev); }

private:
    FinalModel<::trade::Account> _model;
};

} // namespace trade

} // namespace FBE
